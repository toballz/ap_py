#!/usr/bin/python3
import os
import subprocess
from argparse import ArgumentParser, ArgumentTypeError

mainDir=os.path.expanduser('~') 

def args():
 args = ArgumentParser()
 args.add_argument('-y', help='Update all tools', nargs="?", const="1")
 args.add_argument('-e', help='end kill all', nargs="?", const="1")
 return args.parse_args()

#Flush iptables
def fIpTables():
 os.system("sudo iptables --flush")
 os.system("sudo iptables --table nat --flush")
 os.system("sudo iptables --delete-chain")
 os.system("sudo iptables --table nat --delete-chain")
 os.system("sudo iptables --flush -t nat")
 os.system("sudo iptables --table nat --delete-chain")
#write file 1
def write_file(path, s):
 def _run_cmd_write(cmd_args, s):
    # write a file using sudo
    p = subprocess.Popen(cmd_args,
                stdin=subprocess.PIPE,
                stdout=subprocess.DEVNULL,
                shell=False, universal_newlines=True)
    p.stdin.write(s)
    p.stdin.close()
    p.wait()
 _run_cmd_write(("/usr/bin/sudo", "/usr/bin/tee", path), s)
#write file 0

dnsSpoof_host_file = "dnsSpoof_abzq.hosts"

#kill stop all
def killSall():
 print("[~~] Stopping...")
 os.system("sudo /etc/init.d/dnsmasq stop > /dev/null 2>&1")
 os.system("sudo pkill dnsmasq")
 os.system("sudo killall hostapd > /dev/null 2>&1")
 os.system("sudo sysctl net.ipv4.ip_forward=0 > /dev/null 2>&1")
 os.system("sudo rm "+os.getcwd() + "/"+dnsSpoof_host_file)

 print("[~~] Restoring old NetworkManager.cfg")
 if os.path.isfile("/etc/NetworkManager/NetworkManager.conf.backup"):
  os.system("sudo mv /etc/NetworkManager/NetworkManager.conf.backup /etc/NetworkManager/NetworkManager.conf")
 else:
  os.system("sudo mv /etc/NetworkManager/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf.deleted > /dev/null 2>&1")
 print("[~~] Restarting NetworkManager...")
 os.system("sudo service NetworkManager restart")

#@print("[~~] Restoring old dnsmasq.conf...")
#kill stop all

#get arguments
if args().y is not None:
 os.system("sudo apt-get install hostapd")
 os.system("sudo apt-get install dnsmasq")
 os.system("sudo apt-get install nano")
 print("")
if args().e is not None:
 killSall()
 print("Done......")
 exit() 
#get arguments


#begins
os.system("sudo echo")
#wireless, internet interface
wlan_ap = input("[??] Input wireless adapter's name: ")
eth_ap = input("[??] Input internet access point name: ")


fIpTables()

#..netwoorkmanager.conf 1
network_manager_txt = "[main]\nplugins=keyfile\n\n[keyfile]\nunmanaged-devices=interface-name:" + wlan_ap + "\n"
print("\n[~~] Backing up NetworkManager.cfg...")
os.system("sudo cp /etc/NetworkManager/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf.backup")
print("[~~] Editing NetworkManager.cfg...")
write_file("/etc/NetworkManager/NetworkManager.conf", network_manager_txt)
print("[~~] Restarting NetworkManager...")
os.system("sudo service NetworkManager restart")
os.system("sudo ifconfig " + wlan_ap + " up")
#..netwoorkmanager.conf 0

#..DNSMASQ CONFIG 1
os.system("sudo pkill dnsmasq")
print("")
print("[~~] Creating new "+mainDir+"/dnsmasq.conf...")
dnsmasq_txt = "# disables dnsmasq reading any other files like /etc/resolv.conf for nameservers\n\
	no-resolv\n# Interface to bind to\n\
	interface=" + wlan_ap + \
	"\n#Specify starting_range,end_range,lease_time\n\
	dhcp-range=10.0.0.3,10.0.0.20,12h\n\
	# dns addresses to send to the clients\n\
	server=8.8.8.8\n\
	server=10.0.0.1\n\
	address=/#/10.0.0.1\
	no-hosts\n\
	addn-hosts="+os.getcwd() + "/"+dnsSpoof_host_file
print("[~~] Writing config file...")
write_file(mainDir+"/dnsmasq.conf", dnsmasq_txt)
#..DNSMASQ CONFIG 0


#configure dns spoofing 1
os.system("sudo touch "+dnsSpoof_host_file)
write_file(os.getcwd() +"/"+ dnsSpoof_host_file, "##192.168.0.1 domain\n##close when you are done to continue.\n\n\n")
os.system("sudo nano "+ os.getcwd()+"/" + dnsSpoof_host_file)
#configure dns spoofing 0


#..HOSTAPD CONFIG 1
ssid = input("\n[??] Please enter the SSID for the AP: ")
while True:
 channel = input("[??] Enter the channel for the AP: ")
 if channel.isdigit():
  break
 else:
  print("[??] Enter a channel number.")
hostapd_txt = "interface=" + wlan_ap + "\ndriver=nl80211\nssid=" + ssid + "\nhw_mode=g\nchannel=" + channel + "\nmacaddr_acl=0\nauth_algs=1\nignore_broadcast_ssid=0\n"
print("[~~] Writing config file...")
write_file(mainDir+"/hostapd.conf", hostapd_txt)
#..HOSTAPD CONFIG 0

#..IPTABLES 1
print("")
print("[~~] Configuring AP interface...")
os.system("sudo ifconfig " + wlan_ap + " up 10.0.0.1 netmask 255.255.255.0")
print("[~~] Applying iptables rules...")
fIpTables()
os.system("sudo sysctl net.ipv4.ip_forward=1 > /dev/null 2>&1")
os.system("sudo iptables --table nat --append POSTROUTING --out-interface " + eth_ap + " -j MASQUERADE")
os.system("sudo iptables --append FORWARD --in-interface " + wlan_ap + " -j ACCEPT")
os.system("sudo iptables -t nat -A POSTROUTING -o "+eth_ap+" -j MASQUERADE")
#..IPTABLES 0


#..start dnsmasq, hostapd.conf 1
print("")
print("[~~] Starting DNSMASQ server...")
os.system("sudo /etc/init.d/dnsmasq stop > /dev/null 2>&1")
os.system("sudo pkill dnsmasq")
os.system("sudo dnsmasq")
os.system("sudo killall hostapd > /dev/null 2>&1")
print("")
os.system("sudo hostapd "+mainDir+"/hostapd.conf")
#..start dnsmasq, hostapd.conf 0


#..stop all, restart
print("")

killSall()
fIpTables()
#..stop all, restart
